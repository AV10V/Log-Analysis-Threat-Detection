import argparse
import os
import hashlib
import magic
import re

# Script Description
"""
This script performs static analysis on a target file, helping identify potential malware.
It analyzes file type, extracts ASCII strings, and calculates cryptographic hashes (MD5, SHA-1, SHA-256).
This tool is helpful in initial malware inspection without running the file.

Setup Requirements: Install python-magic for file type analysis if not installed:
pip install python-magic

File Metadata: Uses the python-magic library to identify the file type and MIME type, which can provide clues about potential malicious behavior (e.g., if a file’s claimed type doesn’t match its MIME type).
Hashes (MD5, SHA-1, SHA-256): Calculates multiple cryptographic hashes to help verify file integrity or check it against malware databases.
Extracted ASCII Strings: Retrieves printable strings from the binary data, often revealing embedded commands, URLs, and other human-readable information relevant to malware analysis.

Usage : python static_malware_analyzer.py /path/to/suspicious_file

Author : AV10V

"""

# Function to calculate cryptographic hashes
def calculate_hashes(file_path):
    hashes = {
        'md5': hashlib.md5(),
        'sha1': hashlib.sha1(),
        'sha256': hashlib.sha256()
    }
    with open(file_path, "rb") as f:
        for block in iter(lambda: f.read(4096), b""):
            for hash_obj in hashes.values():
                hash_obj.update(block)
    return {name: hash_obj.hexdigest() for name, hash_obj in hashes.items()}

# Function to extract printable ASCII strings from binary files
def extract_strings(file_path, min_length=4):
    strings = []
    with open(file_path, "rb") as f:
        data = f.read()
        strings = re.findall(b"[ -~]{%d,}" % min_length, data)
    return [s.decode('ascii', errors='ignore') for s in strings]

# Function to get file metadata and MIME type
def analyze_metadata(file_path):
    file_info = {}
    try:
        file_info['Size (bytes)'] = os.path.getsize(file_path)
        file_info['File Type'] = magic.from_file(file_path)
        file_info['MIME Type'] = magic.Magic(mime=True).from_file(file_path)
    except Exception as e:
        file_info['Error'] = f"Could not retrieve metadata: {e}"
    return file_info

# Main function to orchestrate file analysis
def analyze_file(file_path):
    if not os.path.isfile(file_path):
        print(f"The file '{file_path}' does not exist.")
        return
    
    print(f"\nAnalyzing file: {file_path}\n{'='*40}")
    
    # Analyze Metadata
    metadata = analyze_metadata(file_path)
    print("File Metadata:")
    for key, value in metadata.items():
        print(f"{key}: {value}")
    
    # Calculate and display cryptographic hashes
    print("\nHashes:")
    hashes = calculate_hashes(file_path)
    for hash_name, hash_value in hashes.items():
        print(f"{hash_name.upper()}: {hash_value}")
    
    # Extract and display ASCII strings
    print("\nExtracted Strings (first 20 results):")
    strings = extract_strings(file_path)
    for line in strings[:20]:
        print(line)
    print(f"Total strings extracted: {len(strings)}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Static Malware Analysis Tool")
    parser.add_argument("file_path", help="Path to the file for static analysis")
    args = parser.parse_args()
    
    analyze_file(args.file_path)
